function varargout = programa(varargin)


% PROGRAMA M-file for programa.fig
%      PROGRAMA, by itself, creates a new PROGRAMA or raises the existing
%      singleton*.
%
%      H = PROGRAMA returns the handle to a new PROGRAMA or the handle to
%      the existing singleton*.
%
%      PROGRAMA('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PROGRAMA.M with the given input arguments.
%
%      PROGRAMA('Property','Value',...) creates a new PROGRAMA or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before programa_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to programa_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
% Edit the above text to modify the response to help programa
% Last Modified by GUIDE v2.5 23-Oct-2008 10:53:24
% Begin initialization code - DO NOT EDIT

gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @programa_OpeningFcn, ...
                   'gui_OutputFcn',  @programa_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
function programa_OpeningFcn(hObject, eventdata, handles, varargin)

% --- Executes just before programa is made visible.
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to programa (see VARARGIN)

% Choose default command line output for programa
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes programa wait for user response (see UIRESUME)
% uiwait(handles.figure1);

format short
% --- Outputs from this function are returned to the command line.
function varargout = programa_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;
global SLABv

function Lvat1_Callback(hObject, eventdata, handles)
% hObject    handle to Lvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Lvat1 as text
%        str2double(get(hObject,'String')) returns contents of Lvat1 as a double
global Lvat
Lvat = str2double(get(hObject, 'String'));
if isnan(Lvat)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Lvat = Lvat;
guidata(hObject,handles)

% --- Executes during object creation, after setting all properties.
function Lvat1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Lvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%- - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - 
%Convierte las cajas a texto
%- - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - 

% ------------ -------------------------- -------

function Wvat1_Callback(hObject, eventdata, handles)
% hObject    handle to Wvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Wvat1 as text
%        str2double(get(hObject,'String')) returns contents of Wvat1 as a double
global Wvat
Wvat = str2double(get(hObject, 'String'));
if isnan(Wvat)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Wvat = Wvat;
guidata(hObject,handles)

% --- Executes during object creation, after setting all properties.
function Wvat1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Wvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Hvat1_Callback(hObject, eventdata, handles)
% hObject    handle to Hvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Hvat1 as text
%        str2double(get(hObject,'String')) returns contents of Hvat1 as a double
global Hvat Lvat Wvat Volume fin DBSurfaces DBThickness DBTolerancess
Hvat = str2double(get(hObject, 'String'));
if isnan(Hvat)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Hvat = Hvat;
guidata(hObject,handles)


% --- Executes during object creation, after setting all properties.
function Hvat1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Hvat1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Volume_Callback(hObject, eventdata, handles)
% hObject    handle to Volume (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global Volume
Volume = str2double(get(hObject, 'String'));
if isnan(Volume)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Volume = Volume;
guidata(hObject,handles)




% --- Executes during object creation, after setting all properties.
function Volume_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Volume (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Area_Callback(hObject, eventdata, handles)
% hObject    handle to Area (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Area as text
%        str2double(get(hObject,'String')) returns contents of Area as a double
Area = str2double(get(hObject, 'String'));
if isnan(Area)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Area = Area;
guidata(hObject,handles)


% --- Executes during object creation, after setting all properties.
function Area_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Area (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.

% --- Executes on button press in Electrical.
function Electrical_Callback(hObject, eventdata, handles)
global Elect
if (get(hObject,'Value') == get(hObject,'Min'))
    Elect = [1 1 1 1 1 1 1 1 1 1 1];
else
    Elect = [0 1 1 0 0 1 1 0 0 1 1];
    % checkbox i not checked-take approriate action
end
disp(Elect);

% hObject    handle to Electrical (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Electrical


% --- Executes on button press in Fire.
function Fire_Callback(hObject, eventdata, handles)
global FireR
if (get(hObject,'Value') == get(hObject,'Min'))
    FireR= [1 1 1 1 1 1 1 1 1 1 1];
else
     FireR= [0 1 1 0 0 1 1 0 0 1 1];
    % checkbox i not checked-take approriate action
end
disp(FireR);
% hObject    handle to Fire (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Fire


% --- Executes on button press in Sanitary.
function Sanitary_Callback(hObject, eventdata, handles)
global Sani 
if (get(hObject,'Value') == get(hObject,'Max'))
    Sani =[0 1 1 0 0 1 1 0 1 1 1];
else
    Sani =[1 1 1 1 1 1 1 1 1 1 1];
    % checkbox i not checked-take approriate action
end
disp(Sani);
% hObject    handle to Sanitary (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Sanitary

 
% --- Executes on button press in Critical.
function Critical_Callback(hObject, eventdata, handles)
global Critic 
if (get(hObject,'Value') == get(hObject,'Min'))
    Critic =[1 1 1 1 1 1 1 1 1 1 1];   
else
 % checkbox i not checked-take approriate action
    Critic =[0 1 1 0 0 1 1 0 0 1 1];
end
disp(Critic);

% --- Executes on selection change in Absorb.
function Absorb_Callback(hObject, eventdata, handles)
global Noproceso Final_Absorb
% hObject    handle to Absorb (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%--Bases de datos para Absorption resistance FDM -----------------------------
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'cellarray','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');

AbsorbFDM1 = exec(conn,'SELECT ALL Absorptivity FROM FDMMaterials WHERE Absorptivity = ''High''  ');
AbsorbFDM1 = fetch(AbsorbFDM1);
close(AbsorbFDM1)
AbsorbFDM2 = exec(conn,'SELECT ALL Absorptivity FROM FDMMaterials WHERE Absorptivity = ''Average''  ');
AbsorbFDM2 = fetch(AbsorbFDM2);
close(AbsorbFDM2)
AbsorbFDM3 = exec(conn,'SELECT ALL Absorptivity FROM FDMMaterials WHERE Absorptivity = ''Low''  ');
AbsorbFDM3 = fetch(AbsorbFDM3);
close(AbsorbFDM3)
%%--Bases de datos para Absorption resistance SLS -----------------------------
AbsorbSLS1 = exec(conn,'SELECT ALL Absorptivity FROM SLSMaterials WHERE Absorptivity = ''High''  ');
AbsorbSLS1 = fetch(AbsorbSLS1);
close(AbsorbSLS1)
AbsorbSLS2 = exec(conn,'SELECT ALL Absorptivity FROM SLSMaterials WHERE Absorptivity = ''Average''  ');
AbsorbSLS2 = fetch(AbsorbSLS2);
close(AbsorbSLS2)
AbsorbSLS3 = exec(conn,'SELECT ALL Absorptivity FROM SLSMaterials WHERE Absorptivity = ''Low''  ');
AbsorbSLS3 = fetch(AbsorbSLS3);
close(AbsorbSLS3)
%%--Bases de datos para Absorption resistance SLA -----------------------------
AbsorbSLA1 = exec(conn,'SELECT ALL Absorptivity FROM SLAMaterials WHERE Absorptivity = ''High''  ');
AbsorbSLA1 = fetch(AbsorbSLA1);
close(AbsorbSLA1)
AbsorbSLA2 = exec(conn,'SELECT ALL Absorptivity FROM SLAMaterials WHERE Absorptivity = ''Average''  ');
AbsorbSLA2 = fetch(AbsorbSLA2);
close(AbsorbSLA2)
AbsorbSLA3 = exec(conn,'SELECT ALL Absorptivity FROM SLAMaterials WHERE Absorptivity = ''Low''  ');
AbsorbSLA3 = fetch(AbsorbSLA3);
close(AbsorbSLA3)
% ---------------------mmmmmmmmmmmmmmmmmmmmmmmmmmm------------------------
close(conn)

Absorb_FDM(1) = numel(AbsorbFDM1.data);
Absorb_FDM(2) = numel(AbsorbFDM2.data);
Absorb_FDM(3) = numel(AbsorbFDM3.data);

Absorb_SLS(1) = numel(AbsorbSLS1.data);
Absorb_SLS(2) = numel(AbsorbSLS2.data);
Absorb_SLS(3) = numel(AbsorbSLS3.data);

Absorb_SLA(1) = numel(AbsorbSLA1.data);
Absorb_SLA(2) = numel(AbsorbSLA2.data);
Absorb_SLA(3) = numel(AbsorbSLA3.data);

%Hay que rellenar la matriz de abajo extrayendo para los procesos que
%faltan sus datos sobre absorcion, asi como en los 3 que ya estan.. (Y
%luego reemplazar los ceros de la matriz "Semia"
Semia= [0 0 0; 0 0 0; 0 0 0; 0 0 0; Absorb_FDM; 0 0 0; 0 0 0; 0 0 0; Absorb_SLA; 0 0 0; Absorb_SLS]

for ika=1: Noproceso
for ira=1: 3
    if Semia(ika,ira) >0
        ni(ira)=1;
    else ni(ira)=0;
    end   
 Fin_Absorb(ika,ira)=ni(ira);    
end 
end
Final_Abs =transpose(Fin_Absorb);

% Determine the selected data set.
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set.
switch str{val};
case '-'
   Final_Absorb = [1 1 1 1 1 1 1 1 1 1 1];     
case 'High' % User selects peaks.
   Final_Absorb =(Final_Abs(1,:));
case 'Average'
   Final_Absorb =(Final_Abs(2,:));
case 'Low' % User selects sinc.
   Final_Absorb =(Final_Abs(3,:));
end
guidata(hObject,handles)
disp(Final_Absorb);

% Hints: contents = get(hObject,'String') returns Absorb contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Absorb


% --- Executes during object creation, after setting all properties.
function Absorb_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Absorb (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% hObject    handle to Critical (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Critical


% --- Executes on selection change in Wear.
function Wear_Callback(hObject, eventdata, handles)
global Noproceso Final_Wear Fin_W
%--Bases de datos para Wear resistance FDM -----------------------------
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'cellarray','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
WearFDM1 = exec(conn,'SELECT ALL "Wear resistance" FROM FDMMaterials WHERE "Wear resistance" = ''High''  ');
WearFDM1 = fetch(WearFDM1);
close(WearFDM1)
WearFDM2 = exec(conn,'SELECT ALL "Wear resistance" FROM FDMMaterials WHERE "Wear resistance" = ''Average''  ');
WearFDM2 = fetch(WearFDM2);
close(WearFDM2)
WearFDM3 = exec(conn,'SELECT ALL "Wear resistance" FROM FDMMaterials WHERE "Wear resistance" = ''Low''  ');
WearFDM3 = fetch(WearFDM3);
close(WearFDM3)
%%--Bases de datos para Wear resistance SLS -----------------------------
WearSLS1 = exec(conn,'SELECT ALL "Wear resistance" FROM SLSMaterials WHERE "Wear resistance" = ''High''  ');
WearSLS1 = fetch(WearSLS1);
close(WearSLS1)
WearSLS2 = exec(conn,'SELECT ALL "Wear resistance" FROM SLSMaterials WHERE "Wear resistance" = ''Average''  ');
WearSLS2 = fetch(WearSLS2);
close(WearSLS2)
WearSLS3 = exec(conn,'SELECT ALL "Wear resistance" FROM SLSMaterials WHERE "Wear resistance" = ''Low''  ');
WearSLS3 = fetch(WearSLS3);
close(WearSLS3)
%%--Bases de datos para Wear resistance SLA -----------------------------
WearSLA1 = exec(conn,'SELECT ALL "Wear resistance" FROM SLAMaterials WHERE "Wear resistance" = ''High''  ');
WearSLA1 = fetch(WearSLA1);
close(WearSLA1)
WearSLA2 = exec(conn,'SELECT ALL "Wear resistance" FROM SLAMaterials WHERE "Wear resistance" = ''Average''  ');
WearSLA2 = fetch(WearSLA2);
close(WearSLA2)
WearSLA3 = exec(conn,'SELECT ALL "Wear resistance" FROM SLAMaterials WHERE "Wear resistance" = ''Low''  ');
WearSLA3 = fetch(WearSLA3);
close(WearSLA3)
% ---------------------mmmmmmmmmmmmmmmmmmmmmmmmmmm------------------------
close(conn)
Wear_FDM(1) = numel(WearFDM1.data);
Wear_FDM(2) = numel(WearFDM2.data);
Wear_FDM(3) = numel(WearFDM3.data);

Wear_SLS(1) = numel(WearSLS1.data);
Wear_SLS(2) = numel(WearSLS2.data);
Wear_SLS(3) = numel(WearSLS3.data);

Wear_SLA(1) = numel(WearSLA1.data);
Wear_SLA(2) = numel(WearSLA2.data);
Wear_SLA(3) = numel(WearSLA3.data);
% Determine the selected data set.
SemiW= [0 0 0; 0 0 0; 0 0 0; 0 0 0; Wear_FDM; 0 0 0; 0 0 0; 0 0 0; Wear_SLA; 0 0 0; Wear_SLS]
for ika=1: Noproceso
for ira=1: 3
    if SemiW(ika,ira) >0
        ni(ira)=1;
    else ni(ira)=0;
    end   
 Fin_W(ika,ira)=ni(ira);    
end 
end
Final_We =transpose(Fin_W);

% Determine the selected data set.
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set.
switch str{val};
case '-'
   Final_Wear = [1 1 1 1 1 1 1 1 1 1 1]; 
case 'High' % User selects peaks.
   Final_Wear =(Final_We(1,:));
case 'Average'
   Final_Wear =(Final_We(2,:));
case 'Low' % User selects sinc.
   Final_Wear =(Final_We(3,:));
end
% Set current data to the selected data set.
guidata(hObject,handles)
disp(Final_Wear);
% Save the handles structure.

% hObject    handle to Wear (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns Wear contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Wear


% --- Executes during object creation, after setting all properties.
function Wear_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Wear (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Maxtemp_Callback(hObject, eventdata, handles)
global Maxtemp Fintemp
Maxtemp = str2double(get(hObject, 'String'));
if isnan(Maxtemp)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Maxtemp = Maxtemp;
guidata(hObject,handles)

setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','report','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
Heat1 = exec(conn,'SELECT ALL "Heat deflection Temperature oC" FROM SLSMaterials');
Heat1 = fetch(Heat1);
close(Heat1)
Heat2 = exec(conn,'SELECT ALL "Heat deflection Temperature oC" FROM FDMMaterials');
Heat2 = fetch(Heat2);
close(Heat2)
Heat3 = exec(conn,'SELECT ALL "Heat deflection Temperature oC" FROM SLAMaterials');
Heat3 = fetch(Heat3);
close(Heat3)
close(conn)
%% Modulo para Temperatura
HeatSLS= max(Heat1.data);
HeatFDM= max(Heat2.data);
HeatSLA= max(Heat3.data);

%cpmparacion para SLS
if Maxtemp > HeatSLS
    TempSLS = 0
else TempSLS =1
end    
%cpmparacion para SLA
if Maxtemp > HeatSLA
    TempSLA = 0
else TempSLA =1
end    
%cpmparacion para FDM
if Maxtemp > HeatFDM
    TempFDM = 0
else TempFDM =1
end    
if Maxtemp < 23
    Fintemp = [1 1 1 1 1 1 1 1 1 1 1];
else
Fintemp = [0 0 0 0 TempFDM 0 0 0 TempSLA 0 TempSLS];
end
disp(Fintemp);
% hObject    handle to Maxtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% Hints: get(hObject,'String') returns contents of Maxtemp as text

%        str2double(get(hObject,'String')) returns contents of Maxtemp as a double


% --- Executes during object creation, after setting all properties.
function Maxtemp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Maxtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in Corrosion.
function Corrosion_Callback(hObject, eventdata, handles)
global Noproceso Final_Corr 
% hObject    handle to Corrosion (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%--Bases de datos para Corrosion resistance FDM -----------------------------
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'cellarray','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
      
CorrFDM1 = exec(conn,'SELECT ALL Corrosion FROM FDMMaterials WHERE Corrosion = ''High''  ');
CorrFDM1 = fetch(CorrFDM1);
close(CorrFDM1)
CorrFDM2 = exec(conn,'SELECT ALL Corrosion FROM FDMMaterials WHERE Corrosion = ''Average''  ');
CorrFDM2 = fetch(CorrFDM2);
close(CorrFDM2)
CorrFDM3 = exec(conn,'SELECT ALL Corrosion FROM FDMMaterials WHERE Corrosion = ''Low''  ');
CorrFDM3 = fetch(CorrFDM3);
close(CorrFDM3)
%%--Bases de datos para Corrosion resistance SLS -----------------------------
CorrSLS1 = exec(conn,'SELECT ALL Corrosion FROM SLSMaterials WHERE Corrosion = ''High''  ');
CorrSLS1 = fetch(CorrSLS1);
close(CorrSLS1)
CorrSLS2 = exec(conn,'SELECT ALL Corrosion FROM SLSMaterials WHERE Corrosion = ''Average''  ');
CorrSLS2 = fetch(CorrSLS2);
close(CorrSLS2)
CorrSLS3 = exec(conn,'SELECT ALL Corrosion FROM SLSMaterials WHERE Corrosion = ''Low''  ');
CorrSLS3 = fetch(CorrSLS3);
close(CorrSLS3)
%%--Bases de datos para Corrosion resistance SLA -----------------------------
CorrSLA1 = exec(conn,'SELECT ALL Corrosion FROM SLAMaterials WHERE Corrosion = ''High''  ');
CorrSLA1 = fetch(CorrSLA1);
close(CorrSLA1)
CorrSLA2 = exec(conn,'SELECT ALL Corrosion FROM SLAMaterials WHERE Corrosion = ''Average''  ');
CorrSLA2 = fetch(CorrSLA2);
close(CorrSLA2)
CorrSLA3 = exec(conn,'SELECT ALL Corrosion FROM SLAMaterials WHERE Corrosion = ''Low''  ');
CorrSLA3 = fetch(CorrSLA3);
close(CorrSLA3)
% ---------------------mmmmmmmmmmmmmmmmmmmmmmmmmmm------------------------
close(conn)

Corr_FDM(1) = numel(CorrFDM1.data);
Corr_FDM(2) = numel(CorrFDM2.data);
Corr_FDM(3) = numel(CorrFDM3.data);

Corr_SLS(1) = numel(CorrSLS1.data);
Corr_SLS(2) = numel(CorrSLS2.data);
Corr_SLS(3) = numel(CorrSLS3.data);

Corr_SLA(1) = numel(CorrSLA1.data);
Corr_SLA(2) = numel(CorrSLA2.data);
Corr_SLA(3) = numel(CorrSLA3.data);

SemiCorr= [0 0 0; 0 0 0; 0 0 0; 0 0 0; Corr_FDM; 0 0 0; 0 0 0; 0 0 0; Corr_SLA; 0 0 0; Corr_SLS]
disp(SemiCorr);
for ika=1: Noproceso
for ira=1: 3
    if SemiCorr(ika,ira) >0
        ni(ira)=1;
    else ni(ira)=0;
    end   
 Final_Corros(ika,ira)=ni(ira);    
end 
end
Fin_Corros=transpose(Final_Corros);
%Final_Corros =transpose(Fin_Corro);
% Determine the selected data set.
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set.
switch str{val};
case '-'    
   Final_Corr = [1 1 1 1 1 1 1 1 1 1 1]; 
case 'High' % User selects peaks.
   Final_Corr =(Fin_Corros(1,:));
case 'Average'
   Final_Corr =(Fin_Corros(2,:));
case 'Low' % User selects sinc.
   Final_Corr =(Fin_Corros(3,:));
end
guidata(hObject,handles)
disp(Final_Corr);

% Hints: contents = get(hObject,'String') returns Corrosion contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Corrosion


% --- Executes during object creation, after setting all properties.
function Corrosion_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Corrosion (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in Rank.
function Rank_Callback(hObject, eventdata, handles)
set(handles.uipanel5,'visible','on');
format short
global Final_Wear Final_Corr Final_Absorb Strengh FinFthick FinFSurface FinTolera Support Maq P_compatib Noproceso
global Critic Sani FireR Elect Fintemp fin Maxtemp
global Volume fin Lvat Wvat Hvat Noproceso Matri Wgeo1 Wape1 Wfunc1 Wmeca1
global DBSurfaces DBThickness DBTolerancess
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','report','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
Bb= exec(conn,'SELECT ALL "Prodigy Plus",Titan,Maxum FROM FDM');
Bb = fetch(Bb);
close(Bb)
Ba = exec(conn,'SELECT ALL "SLA 250","SLA 5000","SLA 7000","SLA viper" FROM SLA');
Ba = fetch(Ba);
close(Ba)
Bc = exec(conn,'SELECT ALL HiQ,"HiQ HS" FROM SLS');
Bc = fetch(Bc);
close(Bc)
close(conn)
Input= sort([Lvat Wvat Hvat],'descend');
a=Input(1);
b=Input(2);
c=Input(3);
%% -----------------Ciclo para SLA ----------------------
SLABv=Ba.data;
Na=4;
SLA1 = sort([SLABv(1) SLABv(2) SLABv(3)],'descend');
SLA2 = sort([SLABv(30) SLABv(31) SLABv(32)],'descend');
SLA3 = sort([SLABv(59) SLABv(60) SLABv(61)],'descend');
SLA4 = sort([SLABv(88) SLABv(89) SLABv(90)],'descend');
Orden1=[SLA1; SLA2; SLA3;SLA4];
for k = 1: Na
   if Orden1(k) * Orden1(k+Na)*Orden1(k+(Na*2)) < Volume;
     SLAB(k)=0 ;
   elseif  a > Orden1(k) || b> Orden1(k+Na) || c> Orden1(k+(2*Na));
     SLAB(k) = 0.75;
   else
     SLAB(k) = 1;
   end
end
SLABB=max(SLAB);
% hObject    handle to Rank (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%%FIn de celula
%% Ciclo para FDM --------------------------------------
FDMBv=Bb.data;
Nb=3;
FDM1 = sort([FDMBv(1) FDMBv(2) FDMBv(3)],'descend');
FDM2 = sort([FDMBv(30) FDMBv(31) FDMBv(32)],'descend');
FDM3 = sort([FDMBv(59) FDMBv(60) FDMBv(61)],'descend');
Orden2=[FDM1; FDM2; FDM3];

for k = 1: Nb
   if Orden2(k) * Orden2(k+Nb)*Orden2(k+(Nb*2)) < Volume;
     FDMB(k)=0 ;
   elseif  a > Orden2(k) || b> Orden2(k+Nb) || c> Orden2(k+(2*Nb));
     FDMB(k) = 0.75;
   else
     FDMB(k) = 1;
   end
end
FDMBB=max(FDMB);
%% Ciclo para SLS ------------------------------
SLSBv=Bc.data;
Nc=2;
SLS1 = sort([SLSBv(1) SLSBv(2) SLSBv(3)],'descend');
SLS2 = sort([SLSBv(30) SLSBv(31) SLSBv(32)],'descend');
Orden3=[SLS1; SLS2];

for k = 1: Nc
   if Orden3(k)*Orden3(k+Nc)*Orden3(k+(Nc*2)) < Volume;
     SLSB(k)=0 ;
   elseif  a > Orden3(k) || b> Orden3(k+Nc) || c> Orden3(k+(2*Nc));
     SLSB(k) = 0.75;
   else
     SLSB(k) = 1;
   end
end
SLSBB=max(SLSB);
fin=[1 1 1 1 FDMBB 1 1 1 SLABB 1 SLSBB];
disp(fin);
% Hints: get(hObject,'String') returns contents of Volume as text
%        str2double(get(hObject,'String')) returns contents of Volume as a
%        double
 
%FINN =[Final_Wear; Final_Corr; Final_Absorb; Strengh; FinFthick; FinFSurface; FinTolera; Support; Maq];
Quad1=[FinFthick;Support];
Quad2=[FinFSurface; FinTolera; Maq];
Quad3=[Final_Wear; Final_Corr; Final_Absorb];
Quad4=[Strengh];

Temp =[Quad1; Quad2; Quad3; Quad4];
Suma1=sum(Quad1);
Suma2=sum(Quad2);
Suma3=sum(Quad3);

%MATRIZ1
                            %for hum=1 : Noproceso
                            %    Suma1(hum)= sum(Quad1(:,hum));
                            %    Suma2(hum)= sum(Quad2(:,hum));
                            %     Suma3(hum)= sum(Quad3(:,hum));
   % Suma4(hum)= sum(Quad4(:,hum));
  %for hum=1 : Noproceso
 %   Mini(hum)= min(FINN(:,hum));
%FINNAL=sum(FINN);
                            %end
Norma1=Suma1;
Norma2=Suma2;
Norma3=Suma3;
Norma4=Strengh;
Normal=[Norma1; Norma2; Norma3; Norma4];


for n=1 :Noproceso
    for m=1 :4
        Convert(m,n)=(Normal(m,n)/sum(Normal(:,n)));
    end    
end
%Weigh=[Wgeo1 Wape1 Wfunc1 Wmeca1]
Weigh=[Wmeca1 Wfunc1 Wape1 Wgeo1];
Finito= Weigh*Convert;

RIBELINO = Finito;
RIBELINO = Critic.*Sani.*FireR.*Elect.*fin.*Fintemp.*P_compatib.*Finito;

set(handles.final,'String',RIBELINO);
axes(handles.axes2);
barh(fliplr(RIBELINO));

%axala=transpose(Convert);
%Wey= [Wgeo1; Wape1; Wfunc1; Wmeca1]
%Weigh=Wey*axala;
%disp(axala);
%disp(Wey);
disp(Temp);
disp(Normal);
disp(Convert);
disp(Finito);

% --- Executes on selection change in Thick.
function Thick_Callback(hObject, eventdata, handles)
format short
global Noproceso Fthick FinFthick FuzzyThick
Noproceso = 11;
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
DBThicknes = exec(conn,'SELECT ALL Min,avg,Max FROM Thickness');
DBThicknes = fetch(DBThicknes);
close(DBThicknes)
close(conn)
DBThickness=DBThicknes.data;
%Dist trapezoide
FTH= [0 0 0.45 0.55; 0 0 1.7 2; 0 0 3.5 4];  
for n1 = 1: Noproceso
    for n2=1:3
      FuzzyThick(n1,n2) =trapmf(DBThickness(n1,n2),[FTH(n2) FTH(n2+3) FTH(n2+6) FTH(n2+9)]);
     end    
end
%Dist triangular
%FTH= [0 0 2.2;0 0.18 4;0 .80 4]; 
%for n1 = 1: Noproceso
 %   for n2=1:3
  %    FuzzyThick(n1,n2) =trimf(DBThickness(n1,n2),[FTH(n2) FTH(n2+3) FTH(n2+6)]);
   %  end    
%end

% Determine the selected data set.
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set
switch str{val};
case '-'
   Fthick = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];    
case 'Very Thin  (0 - 0.5 mm)' % User selects peaks.
   Fthick = FuzzyThick(:,1);
case 'Thin- Avg  (0 .5- 2 mm)'% User selects sinc.
   Fthick = FuzzyThick(:,2);
case 'Avg- Wide (  > 2  mm )' % User selects sinc.
   Fthick = FuzzyThick(:,3);  
end
guidata(hObject,handles)
FinFthick= transpose(Fthick);
disp(FinFthick);
% hObject    handle to Thick (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns Thick contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Thick




% --- Executes on selection change in Finish.
function Finish_Callback(hObject, eventdata, handles)
global Noproceso FSurface FinFSurface
% hObject    handle to Finish (see GCBO)
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
DBSurface = exec(conn,'SELECT ALL Min,avg,Max FROM Surface');
DBSurface = fetch(DBSurface);
close(DBSurface)
close(conn)
DBSurfaces=DBSurface.data;

FS= [0 0 3 5; 0 0 7 12; 0 0 13 30];

Noproceso=11
for n1 = 1: Noproceso
    for n2=1:3
      FuzzySurface(n1,n2) =trapmf(DBSurfaces(n1,n2),[FS(n2) FS(n2+3) FS(n2+6) FS(n2+9)]);
     end    
end
% Determine the selected data set.
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set
switch str{val};
    case '-'
  FSurface = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];      
case 'Excellent (0- 3.2um)' % User selects peaks.
  FSurface = FuzzySurface(:,1);
case 'Good-Avg (3.2- 12.5 um)'% User selects sinc.
  FSurface = FuzzySurface(:,2);
case 'Avg-rough(> 12.5 um)' % User selects sinc.
  FSurface = FuzzySurface(:,3);
end
guidata(hObject,handles)
FinFSurface= transpose(FSurface);
disp(FinFSurface);

% --- Executes on selection change in Tolerance.
function Tolerance_Callback(hObject, eventdata, handles)
global Noproceso FTolera FinTolera
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
DBTolerances = exec(conn,'SELECT ALL Min,avg,Max FROM Tolerances');
DBTolerances = fetch(DBTolerances);
close(DBTolerances)
close(conn)
DBTolerancess=DBTolerances.data;

FT= [0 0 0.095 0.15; 0 0 0.2 0.3; 0 0 2 2.55]; 
%La de abajo es la que ysaba antes
%FT =  [0 0 0.055 0.15; 0 0.12 0.2 0.26; 0 0.27 1 1.55]; % FS viene de Fuzzy_TOLERANCE

for n1 = 1: Noproceso
    for n2=1:3
      FuzzyTolera(n1,n2) =trapmf(DBTolerancess(n1,n2),[FT(n2) FT(n2+3) FT(n2+6) FT(n2+9)]);
     end    
end
% Determine the selected data set.
val = get(hObject,'Value');
switch val;
case 1
  FTolera = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
case 2
  FTolera = FuzzyTolera(:,1);
case 3
  FTolera = FuzzyTolera(:,2);
case 4
  FTolera = FuzzyTolera(:,3);
end
guidata(hObject,handles)
FinTolera= transpose(FTolera);
disp(FinTolera);




% --- Executes on selection change in listbox1.
function listbox1_Callback(hObject, eventdata, handles)
global Support 
iSelected = get(hObject,'Value');
nano= length(iSelected)
for i = 1: nano
     nas= iSelected(i)
switch nas
       case 1
           Maqx(1,:)=[0 0 0 0 0 0 0 0 0 0 0];
       case 2
           Maqx(2,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];
       case 3
           Maqx(3,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];
       case 4
           Maqx(4,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];
       case 5
           Maqx(5,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];
       case 6
           Maqx(6,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];
       case 7
           Maqx(7,:)=[1 0.75 0.75 0.85 0.85 0.75 0.75 0.85 0.85 0.75 1];      
end
end
guidata(hObject,handles)
disp(Maqx);

if length(Maqx(:,1)) > 1
    Maxim= sum(Maqx);
    Support= Maxim/nano;
else
    Support= Maqx;
end
disp(Support);



% hObject    handle to listbox1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox1




% --- Executes on selection change in listbox3.
function listbox3_Callback(hObject, eventdata, handles)
global P_compatib  
iSelected = get(hObject,'Value');
nano= length(iSelected)
for i = 1: nano
     nas= iSelected(i)
switch nas
case 1 
     Max(1,:)=[1 1 1 1 1 1 1 1 1 1 1];    
case 2 % User selects peaks.
     Max(2,:)=[0 1 1 0 0 1 1 0 0 1 0];
case 3 % User selects sinc.
     Max(3,:)=[0 0 0 1 1 0 0 1 1 0 1];
case 4 % User selects sinc.
     Max(4,:)=[1 0 0 0 0 0 0 0 0 0 1];
case 5 % User selects sinc.
     Max(5,:)=[1 0 0 0 0 0 0 0 0 0 1];
case 6 % User selects sinc.    
     Max(6,:)=[1 1 1 1 1 1 1 1 1 1 1];
end
end
guidata(hObject,handles)
Maxim= sum(Max);
P_compatib= Maxim | [0 0 0 0 0 0 0 0 0 0 0]
disp(P_compatib);
% hObject    handle to listbox3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox3 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox3




% --- Executes on selection change in listbox2.
function listbox2_Callback(hObject, eventdata, handles)
global Maq
iSelected = get(hObject,'Value');
nano= length(iSelected)
for i = 1: nano
     nas= iSelected(i)
switch nas
case 1 
     Maqx(1,:) =[0   0   0   0   0   0   0   0   0   0   0];
case 2 % User selects peaks.
     Maqx(2,:) =[0.30	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00    0.80];
case 3 % User selects sinc.
     Maqx(3,:) =[0.75	1.00	1.00	1.00	0.75	1.00	1.00	1.00	1.00	1.00	1.00];
case 4 % User selects sinc.
     Maqx(4,:) =[0.50	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00];
case 5 % User selects sinc.
     Maqx(5,:) =[0.75	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00	1.00];
case 6 % User selects sinc.    
     Maqx(6,:) =[0.75	1.00	1.00	1.00	0.75	1.00	1.00	1.00	1.00	1.00	1.00];
end
end
guidata(hObject,handles)
disp(Maqx);
if length(Maqx(:,1)) > 1
    Maxim= sum(Maqx);
    Maq= Maxim/nano;
else
    Maq= Maqx;
end
disp(Maq);

% --- Executes on selection change in popupmenu5.
function popupmenu5_Callback(hObject, eventdata, handles)
global Strengh
str = get(hObject, 'String');
val = get(hObject,'Value');
% Set current data to the selected data set.
switch str{val};
case '-'
  Strengh = [1	1	1	1	1	1	1	1	1	1	1];  
case 'High' % User selects peaks.
  Strengh = [0.0	1	1	0.0	0.5	1	1	0.166	0.166	1	1];
case 'Average'
  Strengh = [0.166	1	1	0.166	1	1	1	0.166	.25	1	1];
case 'Low' % User selects sinc.
  Strengh = [1	1	1	1	1	1	1	1	1	1	1];
end
guidata(hObject,handles)
disp(Strengh);










% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
set(handles.final,'String','  ');

% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)




% --- Executes during object creation, after setting all properties.
function Critical_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Critical (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

function calcula  = entrada (Makina)
global Volume Lvat Hvat Wvat teta gap alpha phi

vol_part= Volume;
Lpart= Lvat;
Hpart= Hvat;
Wpart= Wvat;
teta=1;
gap=2;
alpha=1;
phi= Volume/(Lvat*Hvat*Wvat);
L_vat =Makina(1);
W_vat =Makina(2);
H_vat =Makina(3);
MachC =Makina(4);
MaintC =Makina(5);
Mach_rate =Makina(6);
tech_rate =Makina(7);
ul =Makina(8);
Nmach =Makina(9);
Dscan =Makina(10);
Vscan =Makina(11);
Vjump =Makina(12);
Hatch =Makina(13);
tlayer =Makina(14);
Nscan =Makina(15);
Nscan_supp =Makina(16);
Zsupp =Makina(17);
supp_factor =Makina(18);
tdraw_delay =Makina(19);
tstg_down =Makina(20);
tstg_delay =Makina(21);
tsweep =Makina(22);
tstg_up =Makina(23);
tswp_delay =Makina(24);
tpreproc =Makina(25);
tprostproc =Makina(26);
tstartup =Makina(27);
MatC =Makina(28);
dens =Makina(29);

Vbb= Lpart* Hpart * Wpart;
%% CALCULO DE TIEMPOS
%antes...  phi alpha
Fphi=(phi*(2.71.^(alpha*(1-phi))));
Zpart=height;
%antes: Zpart
Aavg= (Vbb * Fphi)/Zpart;
lpart=lenght;
Vavg= (Vscan * Fphi)+ (Vjump*(1-Fphi));
Zsupp= Zsupp_min + ((lpart*sin(teta))/2);
Ztotal=(lpart*sin(teta))+ (Zpart*cos(teta));
Ztotal=Zheight;
%Aavg = Aact*(phi*(e.^(alpha*(1-phi))))/phi;
tdraw= (((Nscan* Aavg)/(Dscan * Vavg * Hatch))*(Zheight/tlayer))+ (((Nscan_supp * Aavg* supp_factor)/(Dscan* Vavg * Hatch))*(Zsupp/tlayer));

%segunso mayor
tdelay = (Ztotal/tlayer)*(tdraw_delay + tstg_down + tstg_delay+ tstg_up+ tsweep+ tswp_delay);

%Main formula 1 ----------------------------------
tbuild= tdraw + tdelay + tstartup;

%% CALCULO PARA MULTIPLES PARTES
Nbuild= (L_vat/(Lpart+gap))*(W_vat/Wpart+gap)*(H_vat/Hpart+gap);
tscan=((Nbuild*Nscan*Aavg/Dscan*Vavg*Hatch)*(Zheight/tlayer))+ ((Nbuild*Nscan_supp*Aavg*supp_factor/Dscan*Vavg*Hatch)*(Zsupp/tlayer));
tbuild2= tscan + tdelay + tstartup;
%COST CALCULATOR
Nppd=Nbuild*tbuild;
Cmaterial=(vol_part*dens*(1+supp_factor))*MatC;
Cmaintenance=(MaintC*Nmach)/365*Nppd;
Cmachine=(MachC*Nmach)/(365*ul*Nppd);

Clabor=(tpreproc+tprostproc)*tech_rate;
Cbuild=tbuild*Mach_rate;
Coperation=Cbuild+Clabor;
Ctotal=Cmaterial+Cmaintenance+Cmachine+Coperation;

calc1 = tbuild;
calc2 = tbuild2;
calc3 = Ctotal;





% --------------------------------------------------------------------
function General_Callback(hObject, eventdata, handles)
% hObject    handle to General (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.uipanel1,'visible','on');
set(handles.uipanel2,'visible','on');
set(handles.uipanel3,'visible','on');
set(handles.uipanel4,'visible','on');
set(handles.uipanel9,'visible','off');
set(handles.listbox4,'visible','off');
set(handles.listbox5,'visible','off');
set(handles.listbox6,'visible','off');
set(handles.uipanel11,'visible','off');
set(handles.uipanel13,'visible','off');

% --------------------------------------------------------------------
function Costs_Callback(hObject, eventdata, handles)
% hObject    handle to Costs (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.uipanel1,'visible','off');
set(handles.uipanel2,'visible','off');
set(handles.uipanel3,'visible','off');
set(handles.uipanel4,'visible','off');
set(handles.uipanel9,'visible','on');
set(handles.uipanel11,'visible','on');
set(handles.uipanel13,'visible','on');

% --- Executes on button press in checkbox12.
function checkbox12_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox12


% --- Executes on button press in checkbox13.
function checkbox13_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox13


% --- Executes on button press in checkbox14.
function checkbox14_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox14


% --- Executes on button press in checkbox15.
function checkbox15_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox15


% --- Executes on button press in checkbox16.
function checkbox16_Callback(hObject, eventdata, handles)
if (get(hObject,'Value') == get(hObject,'Min'))
   set(handles.listbox6,'visible','off');  
else
   set(handles.listbox6,'visible','on');  
end

% --- Executes on button press in checkbox17.
function checkbox17_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox17 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox17


% --- Executes on button press in checkbox18.
function checkbox18_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox18


% --- Executes on button press in checkbox19.
function checkbox19_Callback(hObject, eventdata, handles)
if (get(hObject,'Value') == get(hObject,'Max'))
   set(handles.listbox4,'visible','on');  
else
   set(handles.listbox4,'visible','off');  
end


% --- Executes on button press in checkbox20.
function checkbox20_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox20


% --- Executes on button press in checkbox21.
function checkbox21_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox21


% --- Executes on button press in checkbox22.
function checkbox22_Callback(hObject, eventdata, handles)
if (get(hObject,'Value') == get(hObject,'Max'))
   set(handles.listbox5,'visible','on');  
else
   set(handles.listbox5,'visible','off');  
end




% --- Executes on selection change in listbox4.
function listbox4_Callback(hObject, eventdata, handles)
global alpha
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','report','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
SLAm =exec(conn,'SELECT ALL "SLA 250","SLA 5000","SLA 7000","SLA viper" FROM SLA');
SLAm = fetch(SLAm);
close(SLAm)
close(conn)
SLA=SLAm.data
as = get(hObject,'Value');
list = get(hObject,'String');
%item_selected = list{index_selected}; % Convert from cell array
disp(as);
ag=numel(as);
a=[0 0 0 ];
b=[0 0 0 ];
c=[0 0 0 ];
d=[0 0 0 ];
for j=1: ag
    if as(j)==1
        disp('seleccione alguna');
    elseif as(j)==2 
      Makina1=(SLA(:,1));
      alpha=1.6;
        [a(1),a(2),a(3)] = calcula(Makina1);
    elseif as(j)==3   
        Makina2=(SLA(:,2));
        alpha=0.97;
        [b(1), b(2),b(3)] = calcula(Makina2);            
    elseif as(j)==4   
        Makina3=(SLA(:,3));
        alpha=1.04;
        [c(1), c(2), c(3)] = calcula(Makina3);
    elseif as(j)==5   
        Makina3=(SLA(:,4));
        alpha=1.74;
        [d(1), d(2), d(3)] = calcula(Makina3);
    end
end

guidata(hObject,handles)
em=[a; b; c; d];
disp(em);
set(handles.text32,'string',num2str(em));
% hObject    handle to listbox4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox4 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox4


% --- Executes during object creation, after setting all properties.
function listbox4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on selection change in listbox5.
function listbox5_Callback(hObject, eventdata, handles)
global alpha
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','report','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
SLSm = exec(conn,'SELECT ALL HiQ,"HiQ HS",Vanguard FROM SLS');
SLSm = fetch(SLSm);
close(SLSm)
close(conn)
SLS=SLSm.data
as = get(hObject,'Value');
list = get(hObject,'String');
%item_selected = list{index_selected}; % Convert from cell array
disp(as);
ag=numel(as);
a=[0 0 0 ];
b=[0 0 0 ];
c=[0 0 0 ];
for j=1: ag
    if as(j)==1
        disp('seleccione alguna');
    elseif as(j)==2 
      Makina1=(SLS(:,1));
      alpha=2.46;
        [a(1),a(2),a(3)] = calcula(Makina1);
    elseif as(j)==3   
        Makina2=(SLS(:,2));
        alpha=2.399;
        [b(1), b(2),b(3)] = calcula(Makina2);            
    elseif as(j)==4   
        Makina3=(SLS(:,3));
        alpha=1.4;
        [c(1), c(2), c(3)] = calcula(Makina3);
      
    end
end
guidata(hObject,handles)
em=[a; b; c;];
disp(em);
set(handles.text30,'string',num2str(em));
% hObject    handle to listbox5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox5 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox5


% --- Executes during object creation, after setting all properties.
function listbox5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in listbox6.
function listbox6_Callback(hObject, eventdata, handles)
global alpha
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','report','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
FDMm = exec(conn,'SELECT ALL "Prodigy Plus",Titan,Maxum FROM FDM');
FDMm = fetch(FDMm);
close(FDMm)
close(conn)
FDM=FDMm.data
as = get(hObject,'Value');
list = get(hObject,'String');
%item_selected = list{index_selected}; % Convert from cell array
disp(as);
ag=numel(as);
a=[0 0 0 ];
b=[0 0 0 ];
c=[0 0 0 ];
for j=1: ag
    if as(j)==1
        disp('seleccione alguna');
    elseif as(j)==2 
      Makina1=(FDM(:,1));
      alpha=2.46;
        [a(1),a(2),a(3)] = calcula(Makina1);
    elseif as(j)==3   
        Makina2=(FDM(:,2));
        alpha=2.399;
        [b(1), b(2),b(3)] = calcula(Makina2);            
    elseif as(j)==4   
        Makina3=(FDM(:,3));
        alpha=1.4;
        [c(1), c(2), c(3)] = calcula(Makina3);
      
     end
end

guidata(hObject,handles)
em=[a; b; c;];
disp(em);
set(handles.text28,'string',num2str(em));



% hObject    handle to listbox6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox6 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox6


% --- Executes during object creation, after setting all properties.
function listbox6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes during object creation, after setting all properties.
function figure1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called




% --- Executes on selection change in listbox9.
function listbox9_Callback(hObject, eventdata, handles)
% hObject    handle to listbox9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox9 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox9


% --- Executes during object creation, after setting all properties.
function listbox9_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in listbox10.
function listbox10_Callback(hObject, eventdata, handles)
% hObject    handle to listbox10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox10 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox10


% --- Executes during object creation, after setting all properties.
function listbox10_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in listbox11.
function listbox11_Callback(hObject, eventdata, handles)
% hObject    handle to listbox11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox11 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox11


% --- Executes during object creation, after setting all properties.
function listbox11_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in listbox12.
function listbox12_Callback(hObject, eventdata, handles)
% hObject    handle to listbox12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns listbox12 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox12


% --- Executes during object creation, after setting all properties.
function listbox12_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end





function edit9_Callback(hObject, eventdata, handles)
global batch
batch = str2double(get(hObject, 'String'));
if isnan(batch)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.batch = batch;
guidata(hObject,handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit9 as text
%        str2double(get(hObject,'String')) returns contents of edit9 as a double


% --- Executes during object creation, after setting all properties.
function edit9_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end





function edit10_Callback(hObject, eventdata, handles)
global gap
gap = str2double(get(hObject, 'String'));
if isnan(gap)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.gap = gap;
guidata(hObject,handles)
% hObject    handle to edit10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit10 as text
%        str2double(get(hObject,'String')) returns contents of edit10 as a double


% --- Executes during object creation, after setting all properties.
function edit10_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit11_Callback(hObject, eventdata, handles)
global teta
teta = str2double(get(hObject, 'String'));
if isnan(teta)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.teta =teta;
guidata(hObject,handles)

% hObject    handle to edit11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit11 as text
%        str2double(get(hObject,'String')) returns contents of edit11 as a double


% --- Executes during object creation, after setting all properties.
function edit11_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)





function edit20_Callback(hObject, eventdata, handles)
global Wmeca1
Wmeca = str2double(get(hObject, 'String'));
if isnan(Wmeca)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Wmeca = Wmeca;
guidata(hObject,handles)

switch Wmeca;
case 1 % User selects peaks.
   Wmeca1 = 1;
case 2
   Wmeca1 = 0.75;
case 3 % User selects sinc.
   Wmeca1 = 0.5;
case 4 % User selects sinc.
   Wmeca1 = 0.25;
end
% hObject    handle to edit20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit20 as text
%        str2double(get(hObject,'String')) returns contents of edit20 as a double


% --- Executes during object creation, after setting all properties.
function edit20_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit12_Callback(hObject, eventdata, handles)
global Wgeo1
Wgeo = str2double(get(hObject, 'String'));
if isnan(Wgeo)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Wgeo = Wgeo;
guidata(hObject,handles)

switch Wgeo;
case 1 % User selects peaks.
   Wgeo1 = 1;
case 2
   Wgeo1 = 0.75;
case 3 % User selects sinc.
    Wgeo1 = 0.5;
case 4 % User selects sinc.
   Wgeo1 = 0.25;
end
% hObject    handle to edit12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit12 as text
%        str2double(get(hObject,'String')) returns contents of edit12 as a double


% --- Executes during object creation, after setting all properties.
function edit12_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit21_Callback(hObject, eventdata, handles)
global Wape1
Wape = str2double(get(hObject, 'String'));
if isnan(Wape)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Wape = Wape;
guidata(hObject,handles)

switch Wape;
case 1 % User selects peaks.
   Wape1 = 1;
case 2
   Wape1 = 0.75;
case 3 % User selects sinc.
   Wape1 = 0.5;
case 4 % User selects sinc.
   Wape1 = 0.25;
end
% hObject    handle to edit21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit21 as text
%        str2double(get(hObject,'String')) returns contents of edit21 as a double


% --- Executes during object creation, after setting all properties.
function edit21_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit16_Callback(hObject, eventdata, handles)
global Wfunc1
Wfunc = str2double(get(hObject, 'String'));
if isnan(Wfunc)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
handles.metricdata.Wfunc = Wfunc;
guidata(hObject,handles)

switch Wfunc;
case 1 % User selects peaks.
   Wfunc1 = 1;
case 2
   Wfunc1 = 0.75;
case 3 % User selects sinc.
   Wfunc1 = 0.5;
case 4 % User selects sinc.
   Wfunc1 = 0.25;
end
% hObject    handle to edit16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit16 as text
%        str2double(get(hObject,'String')) returns contents of edit16 as a double


% --- Executes during object creation, after setting all properties.
function edit16_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes during object creation, after setting all properties.
function popupmenu5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on slider movement.
function slider1_Callback(hObject, eventdata, handles)
slider_value = get(hObject,'Value');
set(handles.pruebat, 'String', slider_value);

% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function slider1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end




% --- Executes on selection change in popupmenu13.
function popupmenu13_Callback(hObject, eventdata, handles)
global Wmeca1
val = get(hObject,'Value');
switch val;
case 1 % User selects peaks.
   Wmeca1 = 1;
case 2
   Wmeca1 = 0.75;
case 3 % User selects sinc.
   Wmeca1 = 0.5;
case 4 % User selects sinc.
   Wmeca1 = 0.25;
end
    
% The user selected the second item
% proceed with callback...
% hObject    handle to popupmenu13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu13 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu13


% --- Executes during object creation, after setting all properties.
function popupmenu13_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on selection change in popupmenu16.
function popupmenu16_Callback(hObject, eventdata, handles)
global Wgeo1
val = get(hObject,'Value');
switch val;
case 1 % User selects peaks.
   Wgeo1 = 1;
case 2
   Wgeo1 = 0.75;
case 3 % User selects sinc.
   Wgeo1 = 0.5;
case 4 % User selects sinc.
   Wgeo1 = 0.25;
end
% hObject    handle to popupmenu16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu16 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu16


% --- Executes during object creation, after setting all properties.
function popupmenu16_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu14.
function popupmenu14_Callback(hObject, eventdata, handles)
global Wfunc1
val = get(hObject,'Value');
switch val;
case 1 % User selects peaks.
   Wfunc1 = 1;
case 2
   Wfunc1 = 0.75;
case 3 % User selects sinc.
   Wfunc1 = 0.5;
case 4 % User selects sinc.
   Wfunc1 = 0.25;
end
% hObject    handle to popupmenu14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu14 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu14


% --- Executes during object creation, after setting all properties.
function popupmenu14_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu15.
function popupmenu15_Callback(hObject, eventdata, handles)
global Wape1
val = get(hObject,'Value');
switch val;
case 1 % User selects peaks.
   Wape1 = 1;
case 2
   Wape1 = 0.75;
case 3 % User selects sinc.
   Wape1 = 0.5;
case 4 % User selects sinc.
   Wape1 = 0.25;
end

% hObject    handle to popupmenu15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB


% --- Executes on selection change in popupmenu18.
function popupmenu18_Callback(hObject, eventdata, handles)
setdbprefs({'DataReturnFormat','ErrorHandling','NullNumberRead','NullNumberWrite','NullStringRead','NullStringWrite','JDBCDataSourceFile'},{'numeric','store','NaN','NaN','null','null',''});
conn = database('DATABASE','','');
DBThicknes = exec(conn,'SELECT ALL Min,avg,Max FROM Thickness');
DBThicknes = fetch(DBThicknes);
close(DBThicknes)

DBSurface = exec(conn,'SELECT ALL Min,avg,Max FROM Surface');
DBSurface = fetch(DBSurface);
close(DBSurface)

DBTolerances = exec(conn,'SELECT ALL Min,avg,Max FROM Tolerances');
DBTolerances = fetch(DBTolerances);
close(DBTolerances)
close(conn)

DBThickness=DBThicknes.data;
DBSurfaces=DBSurface.data;
DBTolerancess=DBTolerances.data;

val = get(hObject,'Value');
switch val;
case 1 % User selects peaks.
   disp('nada');
case 2
   axes(handles.axes7);
   set(handles.axes7,'XGrid','on')
   stem(DBThickness);
case 3 % User selects sinc.
   axes(handles.axes7);
   stem(DBSurfaces);
case 4 % User selects sinc.
   axes(handles.axes7);
   stem(DBTolerancess);   
end
% hObject    handle to popupmenu18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu18 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu18


% --- Executes during object creation, after setting all properties.
function popupmenu18_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


